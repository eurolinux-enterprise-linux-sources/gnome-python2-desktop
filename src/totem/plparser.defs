;; -*- scheme -*-
; object definitions ...
;; Enumerations and flags ...

(define-enum ParserResult
  (in-module "Totem")
  (c-name "TotemPlParserResult")
  (gtype-id "TOTEM_TYPE_PL_PARSER_RESULT")
  (values
    '("unhandled" "TOTEM_PL_PARSER_RESULT_UNHANDLED")
    '("error" "TOTEM_PL_PARSER_RESULT_ERROR")
    '("success" "TOTEM_PL_PARSER_RESULT_SUCCESS")
  )
)

(define-enum ParserType
  (in-module "Totem")
  (c-name "TotemPlParserType")
  (gtype-id "TOTEM_TYPE_PL_PARSER_TYPE")
  (values
    '("pls" "TOTEM_PL_PARSER_PLS")
    '("m3u" "TOTEM_PL_PARSER_M3U")
    '("m3u-dos" "TOTEM_PL_PARSER_M3U_DOS")
  )
)

(define-enum ParserError
  (in-module "Totem")
  (c-name "TotemPlParserError")
  (gtype-id "TOTEM_TYPE_PL_PARSER_ERROR")
  (values
    '("open" "TOTEM_PL_PARSER_ERROR_VFS_OPEN")
    '("write" "TOTEM_PL_PARSER_ERROR_VFS_WRITE")
  )
)


;; From totem-pl-parser.h

(define-object Parser
  (in-module "PlaylistParser")
  (parent "GObject")
  (c-name "TotemPlParser")
  (gtype-id "TOTEM_TYPE_PL_PARSER")
)

(define-function totem_pl_parser_error_quark
  (c-name "totem_pl_parser_error_quark")
  (return-type "GQuark")
)

(define-function totem_pl_parser_get_type
  (c-name "totem_pl_parser_get_type")
  (return-type "GType")
)

(define-method write
  (of-object "TotemPlParser")
  (c-name "totem_pl_parser_write")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel*" "model")
    '("TotemPlParserIterFunc" "func")
    '("const-char*" "output")
    '("TotemPlParserType" "type")
    '("GError**" "error")
  )
)

(define-method add_ignored_scheme
  (of-object "TotemPlParser")
  (c-name "totem_pl_parser_add_ignored_scheme")
  (return-type "none")
  (parameters
    '("const-char*" "scheme")
  )
)

(define-method parse
  (of-object "TotemPlParser")
  (c-name "totem_pl_parser_parse")
  (return-type "TotemPlParserResult")
  (parameters
    '("const-char*" "url")
    '("gboolean" "fallback")
  )
)

(define-function totem_pl_parser_new
  (c-name "totem_pl_parser_new")
  (is-constructor-of "TotemPlParser")
  (return-type "TotemPlParser*")
)


